"use strict";(self.webpackChunkfreewili_docs=self.webpackChunkfreewili_docs||[]).push([[567],{5226:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"FreeWilli Overview","href":"/","docId":"intro","unlisted":false},{"type":"link","label":"Helpful Links","href":"/helpful-links","docId":"helpful-links","unlisted":false},{"type":"link","label":"GPIO","href":"/gpio","docId":"gpio","unlisted":false},{"type":"category","label":"IO App","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Main Menu Header","href":"/io-app/main-menu-header","docId":"io-app/main-menu-header","unlisted":false},{"type":"link","label":"Main Menu Commands","href":"/io-app/main-menu-commands","docId":"io-app/main-menu-commands","unlisted":false},{"type":"link","label":"Host USB Serial API","href":"/io-app/host-usb-serial-api","docId":"io-app/host-usb-serial-api","unlisted":false},{"type":"link","label":"Scripting with WASM","href":"/io-app/scripting-with-wasm","docId":"io-app/scripting-with-wasm","unlisted":false}],"href":"/io-app/"},{"type":"category","label":"ICE40 FPGA","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ice40 FPGA Overview","href":"/ICE40 FPGA/ice40-fpga-overview","docId":"ICE40 FPGA/ice40-fpga-overview","unlisted":false},{"type":"link","label":"FPGA Connections","href":"/ICE40 FPGA/fpga-connections","docId":"ICE40 FPGA/fpga-connections","unlisted":false},{"type":"link","label":"FPGA Clock","href":"/ICE40 FPGA/fpga-clock","docId":"ICE40 FPGA/fpga-clock","unlisted":false},{"type":"link","label":"FPGA Programming","href":"/ICE40 FPGA/fpga-programming","docId":"ICE40 FPGA/fpga-programming","unlisted":false},{"type":"link","label":"Free Wil-i Firmware Update","href":"/ICE40 FPGA/free-wil-i-firmware-update","docId":"ICE40 FPGA/free-wil-i-firmware-update","unlisted":false}],"href":"/category/ice40-fpga"}]},"docs":{"gpio":{"id":"gpio","title":"GPIO","description":"Description of the GPIO header.","sidebar":"tutorialSidebar"},"helpful-links":{"id":"helpful-links","title":"Helpful Links","description":"C/C++ Installer for RP2040 Open Processor","sidebar":"tutorialSidebar"},"ICE40 FPGA/fpga-clock":{"id":"ICE40 FPGA/fpga-clock","title":"FPGA Clock","description":"The clock signal to the FPGA is supplied by the main RP2040. This is done on GPIO23 using the Clock Generator feature. The clock generated can be generated from numerous clock sources with a integer and fractional divider. For example, the default sys clock of 125 mhz can be used or divided down. Please see the rp2040 data sheet for details.","sidebar":"tutorialSidebar"},"ICE40 FPGA/fpga-connections":{"id":"ICE40 FPGA/fpga-connections","title":"FPGA Connections","description":"The FPGA connects to the Serial SRAM,  IO Drivers, and the RP2040.","sidebar":"tutorialSidebar"},"ICE40 FPGA/fpga-programming":{"id":"ICE40 FPGA/fpga-programming","title":"FPGA Programming","description":"The ice40 FPGA is a SRAM configured FPGA that is programmed automatically at power up.","sidebar":"tutorialSidebar"},"ICE40 FPGA/free-wil-i-firmware-update":{"id":"ICE40 FPGA/free-wil-i-firmware-update","title":"Free Wil-i Firmware Update","description":"Pressing the RED button when  USB is powered activates the RP2040 ROM boot-loader.  This will enable the default way to program the rp2040 via USB.","sidebar":"tutorialSidebar"},"ICE40 FPGA/ice40-fpga-overview":{"id":"ICE40 FPGA/ice40-fpga-overview","title":"ice40 FPGA Overview","description":"The FreeWil-i contains an FPGA between the RP2040 main processor and the IO drivers. The FPGA allows sophisticated high speed IO and state machines that can process IO and communicate to the RP2040 or communicate to the host directly using high speed USB.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"FreeWilli Overview","description":"--\x3e","sidebar":"tutorialSidebar"},"io-app/host-usb-serial-api":{"id":"io-app/host-usb-serial-api","title":"Host USB Serial API","description":"To control Free Wil-i with a host device such as a Linux/Windows PC or Raspberry Pi you can use the USB serial API.","sidebar":"tutorialSidebar"},"io-app/io-app":{"id":"io-app/io-app","title":"IO App","description":"Free Wil-i includes an IO app that allows you to read and write all the IO of Free Wil-i. This app has a Serial Command Line Interface, support for a host API,  on-board scripting, and a file system for stand-alone operations without a host.","sidebar":"tutorialSidebar"},"io-app/main-menu-commands":{"id":"io-app/main-menu-commands","title":"Main Menu Commands","description":"Commands are a single letter. After you enter the letter additonal information is entered. The following command are available from the main menu:","sidebar":"tutorialSidebar"},"io-app/main-menu-header":{"id":"io-app/main-menu-header","title":"Main Menu Header","description":"At the top of the main menu there is information on the setup and state of the Free Wil-i IOs.","sidebar":"tutorialSidebar"},"io-app/scripting-with-wasm":{"id":"io-app/scripting-with-wasm","title":"Scripting with WASM","description":"WebAssembly (WASM)  technology allows a program compiler to target a generic CPU. The program the runs the compiled code is called a web assembly run time.  This technology is included in the IO app.  Please note WebAssembly has nothing to do with the Web - its just where the origin of the technology came from.","sidebar":"tutorialSidebar"}}}}')}}]);